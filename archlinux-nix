#!/bin/sh

sandbox_binaries=""
sandbox_packages="bash"
default_nixos_version="19.09"
default_group="nixbld"
conf_file=/etc/nix/nix.conf

dest=/nix

nix_version=2.3.1

case $(uname -m) in
  x86_64) system=x86_64-linux ;;
  i?86) system=i686-linux ;;
  aarch64) system=aarch64-linux ;;
  *) system=""; hash="" ;;
esac

oops() {
  echo -e "$0:" "$@" >&2
  exit 1
}

pm_path() {
    which -a nix 2>/dev/null | grep '^/usr' | head -n 1
}

pm_installed() {
  [ -n "$(pm_path)" ]
}

nix_installed() {
  [ -f "$dest"/var/nix/profiles/default/bin/nix ]
}

is_installed() {
  pm_installed || nix_installed
}

do_install() {
  if pm_installed; then
    oops "Nix was installed via some other package manager (e.g. AUR). You should use that if you need to update it."
  fi

  if [ -z "$system" ]; then
    oops "No binary is available for this system"
  fi

  local tmpDir="$(mktemp -d -t nix-binary-tarball-unpack.XXXXXXXXXX || \
    oops "Can\'t create temporary directory for downloading the Nix binary tarball")"

  cleanup() {
    rm -rf "$tmpDir"
  }
  trap cleanup EXIT INT QUIT TERM

  local tarball="$tmpDir/nix-$nix_version-$system.tar.xz"
  local url="https://nixos.org/releases/nix/nix-$nix_version/nix-$nix_version-$system.tar.xz"

  echo "downloading Nix $nix_version binary tarball for $system from '$url' to '$tmpDir'..."
  curl -L "$url" -o "$tarball" || oops "failed to download '$url'"

  local hash1=$(curl $url.sha256)
  local hash2="$(sha256sum -b "$tarball" | cut -c1-64)"

  if [ "$hash1" != "$hash2" ]; then
    oops "SHA-256 hash mismatch in '$url'; expected $hash1, got $hash2"
  fi

  local unpack=$tmpDir/unpack
  mkdir -p "$unpack"
  < "$tarball" xzcat | tar x -C "$unpack" || oops "failed to unpack '$url'"
  local self="$unpack/nix-$nix_version-$system"

  mkdir -pm 0755 "$dest/store" && chown root.root "$dest" "$dest/store"
  cp -a -t "$dest/store/" "$self/store/"* || oops "failed to copy store"

  local nix="$dest/store/$(cd "$self/store" && ls -d *-nix-$nix_version)"

  echo "Initialising Nix database..." >&2
  if ! "$nix/bin/nix-store" --option build-users-group "" --init; then
    oops "failed to initialize the Nix database"
  fi

  if ! "$nix/bin/nix-store" --option build-users-group "" --load-db < "$self/.reginfo"; then
    oops "unable to register valid paths"
  fi

  . "$nix/etc/profile.d/nix.sh"

  if ! "$nix/bin/nix-env" --option build-users-group "" -i "$nix"; then
    oops "unable to install Nix into your default profile"
  fi

  ln -s $dest/var/nix/profiles/default/etc/profile.d/nix*.sh /etc/profile.d/

  echo -e "It is recommended that you now bootstrap the Nix install:\n\n\
\t$0 bootstrap"
}

install_sandbox() {
  local version=$1
  mkdir -p $dest/var/nix/profiles/arch-system || exit 1
  NIX_REMOTE="" nix-build \
    --option build-use-sandbox false \
    -o $dest/var/nix/profiles/arch-system/build-sandbox \
    -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/$version.tar.gz \
    -E "with import <nixpkgs> {}; buildEnv { name = \"arch-system-build-sandbox\"; paths = [ $sandbox_packages ]; }" || exit 1
}

sandbox_exists() {
  [ -d /nix/var/nix/profiles/arch-system/build-sandbox ]
}

delete_sandbox() {
  rm -r /nix/var/nix/profiles/arch-system/build-sandbox
}

sandbox_path() {
  readlink -f "/nix/var/nix/profiles/arch-system/build-sandbox/bin/$1"
}

sandbox_paths() {
  [ -f "$conf_file" ] && grep '^\s*build-sandbox-paths\s*=' "$conf_file" | sed 's/^[^=]*=\s*\(.*\)$/\1/'
}

gen_sandbox_paths() {
  local paths="/bin/sh=$(sandbox_path bash)"
  for bin in $sandbox_binaries; do
    paths+=" /usr/bin/$bin=$(sandbox_path $bin)"
  done
  echo "build-sandbox-paths = $paths"
}

delete_sandbox_paths() {
  if [ -f "$conf_file" ]; then
    sed -i '/^\s*build-sandbox-paths\s*=/ d' "$conf_file"
  fi
}

create_config() {
  mkdir -p $(dirname "$conf_file")
  touch "$conf_file"
}

# Append the sandbox paths into the given file
append_sandbox_paths() {
  delete_sandbox_paths
  create_config
  gen_sandbox_paths >> "$conf_file"
}

group_exists() {
  local group=$1
  getent group $group > /dev/null
}

user_exists() {
  local user=$1
  getent passwd $user > /dev/null
}

create_users() {
  local group=$1

  # Create a nixbld group.
  if ! group_exists $group; then
    groupadd -r $group
  else
    echo "Group '$group' already exists"
  fi

  # Create 10 users
  for i in {1..10}; do
    local user=$group$i
    if ! user_exists $user; then
      useradd -g $group -G $group -r -N -M -d /var/empty -s /sbin/nologin $user
    else
      echo "User '$user' already exists"
    fi
  done
}

delete_users() {
  local group=$1

  # Remove the users
  local user
  for i in {1..10}; do
    user=$group$i
    userdel $user
  done

  # Remove the group
  groupdel $group
}

delete_build_group() {
  if [ -f "$conf_file" ]; then
    sed -i '/^\s*build-users-group\s*=/ d' "$conf_file"
  fi
}

append_build_group() {
  delete_build_group

  local group=$1
  create_config
  echo "build-users-group = $group" >> "$conf_file"
}

create_store() {
  local group=$1

  # Create nix folders and set permissions
  mkdir -p /nix/store
  chown root.$group /nix/store
  chmod 1775 /nix/store
  mkdir -p /nix/var/nix/gcroots/per-user
  mkdir -p /nix/var/nix/profiles/per-user
  chmod 1777 /nix/var/nix/{gcroots,profiles}/per-user
}

restore_store() {
  # Restore folder permissions
  chmod 755 /nix/store
  chown root.root /nix/store
  chmod 755 /nix/var/nix/{gcroots,profiles}/per-user
}

build_users_group() {
  [ -f "$conf_file" ] && grep '^\s*build-users-group\s*=' "$conf_file" | sed 's/^.*=\s*\(\w*\)\W/\1/'
}

sandbox_disabled() {
  [ -f "$conf_file" ] && grep -q '^\s*build-use-sandbox\s*=\s*false' "$conf_file"
}

delete_use_sandbox() {
  if [ -f "$conf_file" ]; then
    sed -i '/^\s*build-use-sandbox\s*=/ d' "$conf_file"
  fi
}

append_disable_sandbox() {
  delete_use_sandbox
  create_config
  echo 'build-use-sandbox = false' >> "$conf_file"
}

check_loaded() {
  systemctl show $1 --property=LoadState | grep -q "=loaded"
}

daemon_service_loaded() {
  check_loaded nix-daemon.service
}

daemon_socket_loaded() {
  check_loaded nix-daemon.socket
}

daemon_loaded() {
  daemon_service_loaded && daemon_socket_loaded
}

daemon_socket_active() {
  systemctl --quiet is-active nix-daemon.socket
}

stop_daemon_service() {
  if daemon_service_loaded; then
    systemctl stop nix-daemon.service
  fi
}

stop_daemon_socket() {
  if daemon_service_loaded && daemon_socket_active; then
    systemctl disable --now nix-daemon.socket
  fi
}

start_daemon_socket() {
  if daemon_socket_loaded; then
    systemctl enable nix-daemon.socket
    systemctl restart nix-daemon.socket
  fi
}

link_system_unit_from_profile() {
  systemctl link $dest/var/nix/profiles/$1/lib/systemd/system/$2
}

load_daemon() {
  if nix_installed; then
    link_system_unit_from_profile default nix-daemon.service
    link_system_unit_from_profile default nix-daemon.socket
  else
    systemctl revert nix-daemon.socket
    systemctl revert nix-daemon.service
  fi

  systemctl daemon-reload
}

do_status() {
  if pm_installed; then
    echo "Nix installed via package manager ($(pm_path))"
  elif nix_installed; then
    echo "Nix self-installed"
  else
    oops "Nix not installed"
  fi

  local sandbox=yes
  sandbox_disabled && sandbox=no
  local group=$(build_users_group)

  local exists
  if [ -n "$group" ]; then
    echo "Configured build group: $group"

    exists=no
    group_exists $group && exists=yes
    echo "Group exists: $exists"

    exists=yes
    for user in $group{1..10}; do
      if ! user_exists $user; then
        exists=no
        break
      fi
    done

    echo "Users exist: $exists"
  else
    echo "No configured build group."
  fi

  echo "Using sandbox (recommended): $sandbox"

  if [ $sandbox = yes ]; then
    if pm_installed; then
      exists=no
      sandbox_exists && exists=yes
      echo "Sandbox installed: $exists"
    fi

    local paths=$(sandbox_paths)

    if [ -n "$paths" ]; then
      echo "Sandbox paths:"
      for path in $paths; do
        echo " - $path"
      done
    elif pm_installed; then
      echo "Sandbox paths missing from config file"
    else
      echo "Sandbox paths not required"
    fi
  fi

  echo -n "Nix-daemon service: "
  if daemon_service_loaded; then
    echo loaded
  else
    echo not loaded
  fi

  echo -n "Nix-daemon socket: "
  if ! daemon_socket_loaded; then
    echo not loaded
  elif daemon_socket_active; then
    echo active
  else
    echo not active
  fi
}

do_install_sandbox() {
  if nix_installed; then
    oops "Sandbox paths not required"
  fi

  local version=$1

  if [ -z "$version" ]; then
    version=$default_nixos_version
  fi

  echo "Installing sandbox binaries from NixOS-$version ..."
  install_sandbox $version || exit 1

  echo "Adding build-sandbox-paths to "$conf_file" ..."
  append_sandbox_paths || exit 1

  echo "Enabling sandboxing ..."
  delete_use_sandbox || exit 1

  echo "Killing daemon ..."
  stop_daemon_service
}

do_delete_sandbox() {
  echo "Removing sandbox config ..."
  delete_sandbox_paths || exit 1
  delete_use_sandbox || exit 1

  echo "Killing daemon ..."
  stop_daemon_service

  echo "Unlinking sandbox ..."
  delete_sandbox || exit 1

  echo "You may wish to run 'nix-store --gc' to delete files"
}

do_disable_sandbox() {
  echo "Disabling build sandboxing ..."
  append_disable_sandbox || exit 1

  echo "Killing daemon ..."
  stop_daemon_service
}

do_setup_build_group() {
  local group=$1

  if [ -z "$group" ]; then
    group=$default_group
  fi

  echo "Creating group '$group' and users ..."
  create_users $group

  echo "Setting group in "$conf_file" ..."
  append_build_group $group

  echo "Killing daemon ..."
  stop_daemon_service

  echo "Setting permissions on nix store ..."
  create_store $group
}

do_delete_build_group() {
  local group=$1

  if [ -z $group ]; then
    group=$(build_users_group)
    if [ -z $group ]; then
      oops "No existing group setup"
    fi
  fi

  echo "Deleting build group $group ..."

  if [ "$(build_users_group)" = "$group" ]; then
    echo "Removing build group from "$conf_file" ..."
    delete_build_group

    echo "Killing daemon ..."
    stop_daemon_service

    echo "Resetting permissions on nix store ..."
    restore_store
  fi

  echo "Deleting group and users ..."
  delete_users $group
}

do_enable_nix_daemon() {
  if ! daemon_loaded; then
    echo "Loading nix-daemon into systemd ..."
    load_daemon || exit 1

    if ! daemon_loaded; then
      echo "nix-daemon has not loaded. Exiting ..."
      exit 1
    fi
  fi

  if ! daemon_socket_active; then
    echo "Activating nix-daemon.socket ..."
    start_daemon_socket || exit 1
  fi
}

do_disable_nix_daemon() {
  if daemon_loaded; then
    echo "Stopping and deactivating nix-daemon socket ..."
    stop_daemon_socket || exit 1
    echo "Stopping nix-daemon service (if running) ..."
    stop_daemon_service || exit 1
  else
    echo "Nix-daemon is not loaded"
  fi
}

do_bootstrap() {
  # Step 1: install Nix
  if ! is_installed; then
    oops "You need to install Nix before bootstrapping.\n\
You can install Nix from AUR:\n\n\
\thttps://aur.archlinux.org/packages/nix/\n\n\
Alternatively, you can use Nix itself to install Nix (\"self-hosted\" Nix) with\n\
the help of this tool:\n\n\
\t$0 install"
  fi

  # Step 2: setup sandboxing if required
  if pm_installed && ( ! sandbox_disabled ) && [ -z "$(sandbox_paths)" ]; then
    do_install_sandbox || exit 1
  fi

  # Step 3: setup build users
  local group=$(build_users_group)
  if [ -z "$group" ] || ( ! group_exists $group ); then
    do_setup_build_group $group || exit 1
  else
    # Make sure the /nix folder has the correct permissions
    create_store $group || exit 1
  fi

  # Step 4: launch the daemon
  do_enable_nix_daemon || exit 1

  echo "Nix is bootstrapped."

  # Additional instructions for users that have installed self-hosted nix
  if nix_installed; then
    local nix_env=$dest/var/nix/profiles/default/bin/nix-env
    local nix=$(dirname $(dirname $(realpath "$nix_env")))
    echo
    echo "To get nix-* commands in your path, you need to ensure your local profile has the"
    echo "nix package installed.  It can be installed via the following command:"
    echo
    echo -e "\t\"$nix_env\" -i \"$nix\""
    echo
    echo "You also need to source the following files (or otherwise log out and in):"
    echo
    echo -e "\tsource /etc/profile.d/nix{,-daemon}.sh"
    echo
  fi
}

usage() {
  echo "$(basename $0) <COMMAND>"
  echo -e "\nCOMMAND:"

  echo -e "\tBasic Commands"
  echo -e "\t--------------\n"

  if ! pm_installed; then
    echo -e "\tinstall"
    echo -e "\t\tInstall \"self-hosted\" Nix.  Note that it is also possible to install Nix using"
    echo -e "\t\ta package manager (e.g. AUR)"
  fi

  echo -e "\tbootstrap"
  echo -e "\t\tSetup Nix with sensible defaults"

  echo -e "\tstatus\n\t\tList current status"

  echo -e "\n"
  echo -e "\tAdvanced Commands"
  echo -e "\t-----------------\n"

  echo -e "\tinstall-sandbox [VERSION]"
  echo -e "\t\tSetup sandbox using binaries from specified NixOS version (defaults to $default_nixos_version)"

  echo -e "\tdelete-sandbox"
  echo -e "\t\tDelete sandbox and remove sandbox config"

  echo -e "\tdisable-sandbox"
  echo -e "\t\tDisable sandboxing"

  echo -e "\tsetup-build-group [GROUP]"
  echo -e "\t\tCreate a group of build users and add to config (defaults to $default_group)"

  echo -e "\tdelete-build-group [GROUP]"
  echo -e "\t\tDelete group and users (defaults to existing group given in nix.conf)"

  echo -e "\tenable-nix-daemon"
  echo -e "\t\tEnable and start the nix-daemon"

  echo -e "\tdisable-nix-daemon"
  echo -e "\t\tDisable and stop the nix-daemon"
}

command=$1
[ -n "$command" ] && shift

case $command in
  'install') do_install ;;
  'bootstrap') do_bootstrap ;;
  'status') do_status ;;
  'install-sandbox') do_install_sandbox "$@" ;;
  'delete-sandbox') do_delete_sandbox "$@" ;;
  'disable-sandbox') do_disable_sandbox ;;
  'setup-build-group') do_setup_build_group "$@" ;;
  'delete-build-group') do_delete_build_group "$@" ;;
  'enable-nix-daemon') do_enable_nix_daemon ;;
  'disable-nix-daemon') do_disable_nix_daemon ;;
  'help' | '--help' | '-h' | '') usage ;;
  *)  oops "$(basename $0): unknown option '$command $@'" ;;
esac
